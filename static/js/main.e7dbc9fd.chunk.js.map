{"version":3,"sources":["firebase.jsx","Component/ChatHeader.jsx","Component/Message.jsx","features/userSlice.js","features/appSlice.js","Component/Chat.jsx","Component/Login.jsx","Component/SidebarChannel.jsx","Component/Sidebar.jsx","App.js","app/store.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","ChatHeader","channelName","className","type","placeholder","Message","timestamp","message","user","Avatar","src","photo","displayName","userSlice","createSlice","name","initialState","reducers","login","state","action","payload","logout","actions","selectUser","channelsSlice","channelId","setChannelInfo","selectChannelId","app","selectChannelName","Chat","useSelector","useState","Input","setInput","setMessage","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","mess","fontSize","disabled","value","onChange","e","target","onClick","preventDefault","add","FieldValue","serverTimestamp","Login","alt","Button","signInWithPopup","catch","error","alert","SidebarChannel","id","console","log","dispatch","useDispatch","Sidebar","channels","setChannels","channel","prompt","key","signOut","uid","substring","App","onAuthStateChanged","authUser","photoURL","email","configureStore","reducer","userReducer","appReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e7dbc9fd.chunk.js","sourcesContent":["  \r\nimport firebase from 'firebase';\r\nconst firebaseApp = firebase.initializeApp({\r\n    apiKey: \"AIzaSyCkHqF0xTEuz3nGfDRRPUAjESC_a47rofg\",\r\n    authDomain: \"discord-clone-67a74.firebaseapp.com\",\r\n    databaseURL: \"https://discord-clone-67a74.firebaseio.com\",\r\n    projectId: \"discord-clone-67a74\",\r\n    storageBucket: \"discord-clone-67a74.appspot.com\",\r\n    messagingSenderId: \"938787127893\",\r\n    appId: \"1:938787127893:web:f9e2f776df4ab145ef4adc\",\r\n    measurementId: \"G-HVZREHTN2T\"\r\n})\r\n\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\nexport {db , auth,provider};","import React from 'react';\r\nimport '../Css/chat.css';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport EditLocationIcon from '@material-ui/icons/EditLocation';\r\nimport PeopleAltIcon from '@material-ui/icons/PeopleAlt';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport HelpIcon from '@material-ui/icons/Help';\r\n\r\nconst ChatHeader=({channelName})=> {\r\n    return (\r\n        <div className=\"chatHeader\">\r\n            <div className=\"chatHeader_l\">\r\n                <h3>\r\n                    <span className=\"chatHeader_s\">#</span>\r\n                    {channelName}\r\n                </h3>\r\n            </div>\r\n            <div className=\"chatHeader_r\">\r\n               <NotificationsIcon/>\r\n               <EditLocationIcon/>\r\n               <PeopleAltIcon/>\r\n               <div className=\"chatHeader_S\">\r\n                   <input type=\"text\" placeholder=\"Search\"/>\r\n                   <SearchIcon/>\r\n\r\n               </div>\r\n               <SendIcon/>\r\n               <HelpIcon/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatHeader;\r\n","import React from 'react';\r\nimport {Avatar} from '@material-ui/core';\r\nconst Message=({timestamp,message,user})=> {\r\n    return (\r\n        <div className=\"message\">\r\n            <Avatar src={user.photo}/>\r\n            <div className=\"message_info\">\r\n                <h4>{user.displayName}\r\n                    {/* <span className=\"message_time\">{new Date(timestamp?.toDate()).toUTCString()}</span> */}\r\n                </h4>\r\n                <p>{message}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const userSlice = createSlice({\r\n  name: 'user',\r\n  initialState: {\r\n    user: null,\r\n  },\r\n  reducers: {\r\n    login: (state,action) => {\r\n      state.user=action.payload;\r\n    },\r\n    logout: state=>{\r\n      state.user=null;\r\n    }\r\n  },\r\n});\r\n\r\nexport const { login,logout } = userSlice.actions;\r\nexport const selectUser = state => state.user.user;\r\nexport default userSlice.reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const channelsSlice = createSlice({\r\n  name: 'app',\r\n  initialState: {\r\n    channelId: null,\r\n    channelName:null,\r\n\r\n  },\r\n  reducers: {\r\n    setChannelInfo: (state,action) => {\r\n      state.channelId=action.payload.channelId;\r\n      state.channelName=action.payload.channelName;\r\n    },\r\n    \r\n  },\r\n});\r\n\r\nexport const { setChannelInfo } = channelsSlice.actions;\r\nexport const selectChannelId = state => state.app.channelId;\r\nexport const selectChannelName = state => state.app.channelName;\r\nexport default channelsSlice.reducer;\r\n","import React, { useEffect, useState } from 'react';\r\nimport '../Css/chat.css';\r\nimport ChatHeader from './ChatHeader';\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport CardGiftcardIcon from '@material-ui/icons/CardGiftcard';\r\nimport GifIcon from '@material-ui/icons/Gif';\r\nimport EmojiEmotionsIcon from '@material-ui/icons/EmojiEmotions';\r\nimport Message from './Message';\r\nimport { selectUser } from '../features/userSlice';\r\nimport { selectChannelId, selectChannelName } from '../features/appSlice';\r\nimport { useSelector } from 'react-redux';\r\nimport { db } from '../firebase';\r\nimport firebase from \"firebase\";\r\n\r\nconst Chat=()=> {\r\n    const user =useSelector(selectUser);\r\n    const channelId = useSelector(selectChannelId);\r\n    const channelName= useSelector(selectChannelName);\r\n    const[Input,setInput]=useState(\"\");\r\n    const[message,setMessage]=useState([]);\r\n\r\n    useEffect(()=>{\r\n        if(channelId){\r\n            db.collection(\"dbchannels\")\r\n            .doc(channelId)\r\n            .collection(\"messages\")\r\n            .orderBy(\"timestamp\",\"desc\")\r\n            .onSnapshot((snapshot)=>\r\n              setMessage(snapshot.docs.map((doc)=>doc.data()))\r\n            );\r\n        }\r\n        \r\n    },[channelId]);\r\n\r\n    const sendMessage=(e)=>{\r\n        e.preventDefault();\r\n        db.collection(\"dbchannels\").doc(channelId)\r\n         .collection(\"messages\").add({\r\n             timestamp:firebase.firestore.FieldValue.serverTimestamp(),\r\n             message:Input,\r\n             user:user,\r\n         });\r\n         setInput(\"\");\r\n    }\r\n\r\n    return (\r\n        <div className=\"chat\">\r\n           <ChatHeader channelName={channelName}/>\r\n\r\n           <div className=\"chat_message\">\r\n                {\r\n                    message.map((mess)=>(\r\n                        <Message\r\n                            timestamp={mess.timestamp}\r\n                            message={mess.message}\r\n                            user={mess.user}\r\n                        />\r\n\r\n                    ))}\r\n\r\n\r\n               {/* <Message />\r\n               <Message />\r\n               <Message /> */}\r\n               \r\n           </div>\r\n\r\n           \r\n           <div className=\"chat_input\">\r\n               <AddCircleOutlineIcon fontSize=\"large\"/>\r\n               <form>\r\n                   <input type=\"text\" disabled={!channelId} value={Input} onChange={(e)=>setInput(e.target.value)} placeholder={`Message # ${channelName}`}/>\r\n                   <button type=\"submit\" className=\"chat_inputButton\" onClick={sendMessage}>Send Message</button>\r\n               </form>\r\n               <div className=\"chat_inputIcon\">\r\n                   <CardGiftcardIcon fontSize=\"large\"/>\r\n                   <GifIcon fontSize=\"large\"/>\r\n                   <EmojiEmotionsIcon fontSize=\"large\"/>\r\n               </div>\r\n           </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat;\r\n","import { Button } from '@material-ui/core';\r\nimport { auth,provider } from '../firebase';\r\nimport React from 'react';\r\nimport '../Css/login.css';\r\n\r\n\r\nconst Login=()=> {\r\n    const signIn=(e)=>{\r\n        auth.signInWithPopup(provider).catch((error)=> alert(error.message));\r\n    };\r\n\r\n    return (\r\n        <div className=\"login\">\r\n            <div className=\"login_img\">\r\n                <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/c/ca/Discord_Color_Text_Logo.svg/768px-Discord_Color_Text_Logo.svg.png\" alt=\"discord\"/>\r\n            </div>\r\n            <Button onClick={signIn}>Sign IN</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;\r\n","import React from 'react'\r\nimport { useDispatch } from 'react-redux';\r\nimport '../Css/sidebar.css';\r\nimport { setChannelInfo } from '../features/appSlice';\r\n\r\nconst SidebarChannel=({id,channelName})=> {\r\n    console.log(\"id is\",id);\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <div className=\"sidebarchannel\" onClick={()=>dispatch(\r\n            setChannelInfo({\r\n                channelId:id,\r\n                channelName:channelName,\r\n            })\r\n        )}>\r\n            <h4>\r\n                <span className=\"sidebarchannel_s\">\r\n                    #\r\n                </span>\r\n                {channelName}\r\n            </h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SidebarChannel;\r\n","import React, { useEffect, useState } from 'react';\r\nimport '../Css/sidebar.css';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport SidebarChannel from './SidebarChannel';\r\nimport SignalCellularAltIcon from '@material-ui/icons/SignalCellularAlt';\r\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\r\nimport CallIcon from '@material-ui/icons/Call';\r\nimport { Avatar } from '@material-ui/core';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport HeadsetIcon from '@material-ui/icons/Headset';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectUser } from '../features/userSlice';\r\nimport { auth, db } from '../firebase';\r\n\r\nconst Sidebar=()=> {\r\n    const user = useSelector(selectUser);\r\n    const [channels,setChannels]=useState([]);\r\n    \r\n    useEffect(()=>{\r\n        db.collection(\"dbchannels\").onSnapshot((snapshot)=>\r\n        setChannels(\r\n            snapshot.docs.map((doc)=>({\r\n                id:doc.id,\r\n                channel:doc.data(),\r\n            }))\r\n        )\r\n        );\r\n    },[]);\r\n\r\n    const addChannel=()=>{\r\n        const channelName=prompt(\"Enter a new channel name\");\r\n        if(channelName){\r\n            db.collection(\"dbchannels\").add({\r\n                channelName: channelName,\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"sidebar\">\r\n          <div className=\"sidebar_start\">\r\n              <h3>Muhammad Haris</h3>\r\n              <ExpandMoreIcon/>\r\n          </div>\r\n          <div className=\"sidebar_channels\">\r\n              <div className=\"sidebar_channelsHeader\">\r\n                  <div className=\"sidebar_h\">\r\n                  <ExpandMoreIcon/>\r\n                  <h4>Channels</h4>\r\n                  </div>\r\n                    <AddIcon className=\"sidebar_icon\"onClick={addChannel}/>\r\n              </div>\r\n\r\n              <div className=\"sidebar_channelI\">\r\n                   {channels.map(({id,channel})=>(\r\n                       <SidebarChannel key={id}\r\n                           id={id}\r\n                           channelName={channel.channelName}\r\n                       />\r\n                   ))}\r\n\r\n                    {/* <SidebarChannel/>\r\n                    <SidebarChannel/>\r\n                    <SidebarChannel/>\r\n                    <SidebarChannel/> */}\r\n\r\n              </div>\r\n          </div>\r\n          <div className=\"sidebar_2last\">\r\n              <SignalCellularAltIcon fontSize=\"large\" className=\"s2l_vicon\"/>\r\n          \r\n          <div className=\"sidebar_2lastInfo\">\r\n              <h3>Voice Connected</h3>\r\n              <p>Stream</p>\r\n          </div>\r\n          <div className=\"sidebar_2lastIcon\">\r\n              <HelpOutlineIcon/>\r\n              <CallIcon/>\r\n          </div>\r\n          </div>\r\n\r\n          <div className=\"sidebar_last\">\r\n              <Avatar \r\n              className=\"siidebar_avatar\" \r\n              src={user.photo}\r\n              onClick={()=>auth.signOut()}    \r\n              />\r\n\r\n              <div className=\"sidebar_lastInfo\">\r\n              <h3>{user.displayName}</h3>\r\n              <p>#{user.uid.substring(0,5)}</p>\r\n          </div>\r\n\r\n          <div className=\"sidebar_lastIcon\">\r\n              <MicIcon/>\r\n              <HeadsetIcon/>\r\n              <SettingsIcon/>\r\n          </div>\r\n          \r\n          </div>  \r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar;\r\n","import { auth } from './firebase';\r\nimport React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Chat from './Component/Chat';\r\nimport Login from './Component/Login';\r\nimport Sidebar from './Component/Sidebar';\r\nimport {selectUser} from './features/userSlice';\r\nimport {login,logout} from './features/userSlice';\r\n\r\nconst App=()=>{\r\n  const user =useSelector(selectUser);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    auth.onAuthStateChanged((authUser)=>{\r\n      console.log(\"user is\",authUser);\r\n      if(authUser){\r\n        //login\r\n        dispatch(\r\n          login({\r\n            uid:authUser.uid,\r\n            photo:authUser.photoURL,\r\n            email:authUser.email,\r\n            displayName:authUser.displayName\r\n          })\r\n        );\r\n      }\r\n      else{\r\n       //logout\r\n       dispatch(logout());\r\n      }\r\n       })\r\n  }, [dispatch])\r\n\r\n  return (\r\n    <div className=\"app\">\r\n    {\r\n      user?(\r\n        <>\r\n        <Sidebar/>\r\n        <Chat/>\r\n        </>\r\n      ):(\r\n        <Login/>\r\n      )\r\n    }\r\n    \r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport userReducer from '../features/userSlice';\r\nimport appReducer from '../features/appSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n    app:appReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}